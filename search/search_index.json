{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"contributing/","title":"Contributing","text":"<p>Issues and pull requests are more than welcome: github.com/developmentseed/eoAPI/issues</p> <p>You can also start Discussions in github.com/developmentseed/eoAPI/discussions</p>"},{"location":"contributing/#open-source","title":"Open Source","text":"<p>You can also contribute indirectly to eoAPI by helping on the sub-modules:</p> <ul> <li>PgSTAC database stac-utils/pgstac</li> <li>stac-fastapi: stac-utils/stac-fastapi</li> <li>titiler-pgstac:  stac-utils/titiler-pgstac</li> <li>TiTiler: developmentseed/titiler</li> <li>TiPg: developmentseed/tipg</li> </ul>"},{"location":"customization/","title":"Customization","text":"<p>The eoapi-devseed repository (developmentseed/eoapi-devseed) hosts customized versions of each base service. The documentation below demonstrates how each service can be customized. The eoAPI services can work in parallel or in combination with each other.</p>"},{"location":"customization/#eoapistac","title":"eoapi.stac","text":"<p>Built on stac-fastapi.pgstac application, adding a <code>TiTilerExtension</code> and a simple <code>Search Viewer</code>.</p> <p>The service includes:</p> <ul> <li>Full stac-fastapi implementation - see docs if using the <code>docker-compose</code> configuration.</li> <li>Simple STAC Search viewer - see viewer if using the <code>docker-compose</code> configuration.</li> <li>Proxy to the tiler endpoint for STAC Items.</li> </ul> <p>When the <code>TITILER_ENDPOINT</code> environment variable is set (pointing to the <code>raster</code> application), additional endpoints will be added to the stac-fastapi application (see: stac/extension.py):</p> <ul> <li><code>/collections/{collectionId}/items/{itemId}/tilejson.json</code>: Return the <code>raster</code> tilejson for an item</li> <li><code>/collections/{collectionId}/items/{itemId}/viewer</code>: Redirect to the <code>raster</code> viewer</li> </ul> <p> </p> <p>Code: /runtimes/eoapi/stac</p>"},{"location":"customization/#eoapiraster","title":"eoapi.raster","text":"<p>The dynamic tiler deployed within <code>eoapi-devseed</code> is built on top of titiler-pgstac and pgstac. It enables large-scale mosaic based on the results of STAC search queries.</p> <p>The service includes all the default endpoints from titiler-pgstac application and:</p> <ul> <li> <p><code>/</code>: a custom landing page with links to the different endpoints</p> </li> <li> <p><code>/mosaic/builder</code>: a virtual mosaic builder UI, which helps create and register STAC Search queries</p> </li> <li> <p><code>/collections</code>: a secret (not in OpenAPI documentation) endpoint used in the mosaic-builder page</p> </li> <li> <p><code>/collections/{collection_id}/items/{item_id}/viewer</code>: a simple STAC Item viewer</p> </li> </ul> <p> </p> <p>Code: /runtimes/eoapi/raster</p>"},{"location":"customization/#eoapivector","title":"eoapi.vector","text":"<p>OGC Features and Tiles API built on top of tipg.</p> <p>By default, the API will look for tables in the <code>public</code> schema of the database. We've also added three functions that connect to the pgSTAC schema:</p> <ul> <li>pg_temp.pgstac_collections_view: Simple function which returns PgSTAC Collections</li> <li>pg_temp.pgstac_hash: Return features for a specific <code>searchId</code> (hash)</li> <li>pg_temp.pgstac_hash_count: Return the number of items per geometry for a specific <code>searchId</code> (hash)</li> </ul> <p> </p> <p>Code: /runtimes/eoapi/vector</p> <p>--</p>"},{"location":"customization/#stac-browser","title":"STAC browser","text":"<p>The custom browser configuration can be modified using the config located in /dockerfiles/browser_config.js. For more information about available configurations, see the Radiant Earth repository.</p>"},{"location":"deployment/","title":"Deployment","text":""},{"location":"deployment/#via-eoapi-cdk","title":"Via eoapi-cdk","text":"<p>eoapi-cdk is a set of AWS CDK constructs that can be used to easily deploy eoAPI services on AWS with the CDK.</p> <p>eoapi-template is an AWS CDK app that shows how to configure the eoapi-cdk constructs.</p> <p>An example of Cloud Stack is available for AWS (RDS for the database and Lambda for the APIs).</p> <p>The stack is deployed by the AWS CDK utility. Under the hood, CDK will create the deployment packages required for AWS Lambda, upload them to AWS, and handle the creation of the Lambda and API Gateway resources.</p> <p>The example commands here will deploy a CloudFormation stack called <code>eoAPI-staging</code>.</p> <ol> <li> <p>Clone the <code>eoapi</code> repo and install dependencies     <pre><code># Download eoapi repo\ngit clone https://github.com/developmentseed/eoapi-template.git\ncd eoapi-template\n\n# Create a virtual environment\npython -m venv .venv\nsource .venv/bin/activate\n\n# install cdk dependencies\npython -m pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Install node dependency - requires node version 14+     <pre><code>npm install\n</code></pre></p> </li> <li> <p>Update settings</p> <p>Set environment variable or complex code in the <code>.env</code> or <code>config.yaml</code> file (e.g., github.com/developmentseed/eoapi-template/blob/main/config.yaml.example).</p> <p>See github.com/developmentseed/eoapi-template/blob/main/infrastructure/config.py for more info on the configuration options.</p> </li> <li> <p>Install CDK and connect to your AWS account. This step is only necessary once per AWS account. The environment variables <code>PROJECT_ID</code> and <code>STAGE</code> determines the name of the stack (e.g., eoAPI-staging or eoAPI-production)     <pre><code># Deploy the CDK toolkit stack into an AWS environment.\nPROJECT_ID=eoAPI \\\nSTAGE=staging \\\nnpx cdk bootstrap\n\n# or to a specific region\nAWS_DEFAULT_REGION=us-west-2 \\\nAWS_REGION=us-west-2 \\\nPROJECT_ID=eoAPI \\\nSTAGE=staging \\\nnpx cdk bootstrap\n</code></pre></p> </li> <li> <p>Pre-Generate CFN template</p> <pre><code>PROJECT_ID=eoAPI \\\nSTAGE=staging \\\nnpx cdk synth --all  # Synthesizes and prints the CloudFormation template for this stack\n</code></pre> </li> <li> <p>Deploy</p> <pre><code># Note: a VPC stack is needed for the database\nPROJECT_ID=eoAPI \\\nSTAGE=staging \\\nnpx cdk deploy vpceoAPI-staging eoAPI-staging\n\n# Deploy in a specific region\nAWS_DEFAULT_REGION=eu-central-1 \\\nAWS_REGION=eu-central-1 \\\nPROJECT_ID=eoAPI \\\nSTAGE=staging \\\nnpx cdk deploy vpceoAPI-staging eoAPI-stagingg --profile {my-aws-profile}\n</code></pre> </li> </ol> <p>If you get an error saying that the max VPCs have been reached, you have hit the limit for the number of VPCs per unique AWS account and region combination. You can change the AWS region to a region with fewer VPCs and deploy again to fix this.</p>"},{"location":"deployment/#via-eoapi-k8s","title":"Via eoapi-k8s","text":"<p>eoapi-k8s has the IaC and Helm charts for deploying eoAPI services on AWS and GCP.</p> <p>Getting started</p> <p>If you still need to set up a k8s cluster on AWS or GCP, then follow an IaC guide below that is relevant to you.</p> <p>\u24d8 The helm chart in this repo assumes your cluster has a few third-party add-ons and controllers installed. So It's in your best interest to read through the IaC guides to understand what those defaults are</p> <ul> <li> <p> AWS EKS Cluster Setup</p> </li> <li> <p> TBD: GCP GKE Cluster Setup</p> </li> </ul> <p>Helm Installation</p> <p>Once you have a k8s cluster set up, you can <code>helm install</code> eoAPI as follows</p> <ol> <li> <p><code>helm install</code> from this repo's <code>helm-chart/</code> folder:</p> <pre><code>  ######################################################\n  # create os environment variables for required secrets\n  ######################################################\n  $ export GITSHA=$(git rev-parse HEAD | cut -c1-10)\n  $ export PGUSER=s00pers3cr3t\n  $ export POSTGRES_USER=s00pers3cr3t\n  $ export POSTGRES_PASSWORD=superuserfoobar\n  $ export PGPASSWORD=foobar\n\n  $ cd ./helm-chart\n\n  $ helm install \\\n      --namespace eoapi \\\n      --create-namespace \\\n      --set gitSha=$GITSHA \\\n      --set db.settings.secrets.PGUSER=$PGUSER \\\n      --set db.settings.secrets.POSTGRES_USER=$POSTGRES_USER \\\n      --set db.settings.secrets.PGPASSWORD=$PGPASSWORD \\\n      --set db.settings.secrets.POSTGRES_PASSWORD=$POSTGRES_PASSWORD \\\n      eoapi \\\n      ./eoapi\n</code></pre> </li> <li> <p>or <code>helm install</code> from devseed.com/eoapi-k8s/:</p> <pre><code>  # add the eoapi helm repo locally\n  $ helm repo add eoapi https://devseed.com/eoapi-k8s/\n\n  # List out the eoapi chart versions\n  $ helm search repo eoapi\n  NAME            CHART VERSION   APP VERSION     DESCRIPTION\n  eoapi/eoapi     0.1.1           0.1.0           Create a full Earth Observation API with Metada...\n  eoapi/eoapi     0.1.2           0.1.0           Create a full Earth Observation API with Metada...\n\n  # add the required secret overrides to an arbitrarily named `.yaml` file (`config.yaml` below)\n  $ cat config.yaml\n  db:\n    settings:\n      secrets:\n        PGUSER: \"username\"\n        POSTGRES_USER: \"username\"\n        PGPASSWORD: \"password\"\n        POSTGRES_PASSWORD: \"password\"\n\n  # then run `helm install` with those overrides\n  helm install eoapi eoapi/eoapi --version 0.1.1 -f config.yaml\n</code></pre> </li> </ol>"},{"location":"intro/","title":"Intro","text":"<p> <p>Create a full Earth Observation API with Metadata, Raster, and Vector services.</p> </p>"},{"location":"intro/#earth-observation-api","title":"Earth Observation API","text":"<p><code>eoAPI</code> combines several state-of-the-art projects to create a full Earth Observation API. Each service can be used and deployed independently, but <code>eoAPI</code> creates the interconnections between each service:</p> <ul> <li> <p>pgSTAC database stac-utils/pgstac</p> </li> <li> <p>STAC API built on top of stac-utils/stac-fastapi</p> </li> <li> <p>STAC browser a UI that exposes, in a user friendly interface, the metadata served by the STAC API. Built on top of radiantearth/stac-browser</p> </li> <li> <p>STAC Items And Mosaic Raster Tiles API built on top of stac-utils/titiler-pgstac</p> </li> <li> <p>OGC Features and Vector Tiles API built on top of developmentseed/tipg</p> </li> </ul>"},{"location":"intro/#eoapi-an-open-source-community-project","title":"\ud83c\udf0d eoAPI: An Open-Source Community Project","text":"<p><code>eoAPI</code> is proudly open-source and driven by a dedicated community of contributors. We believe in the power of open collaboration and welcome anyone to contribute, discuss, and grow this tool. Join the conversations on GitHub Discussions and make a difference in the Earth Observation realm.</p>"},{"location":"intro/#why-should-you-use-eoapi","title":"Why should you use <code>eoAPI</code>","text":"<ul> <li> <p>Focus on your use case: <code>eoAPI</code>\u00a0is used for large-scale data processing, building geographic information systems (GIS), creating real-time data applications, climate research and environmental monitoring, machine learning model training, and more.</p> </li> <li> <p>Unified Repository: <code>eoAPI</code>\u00a0provides a single, unified repository for several state-of-the-art Earth Observation (EO) data services, including Metadata search (STAC), Raster, and Vector services. This can simplify the process of accessing and working with these services.</p> </li> <li> <p>Interoperability: <code>eoAPI</code>\u00a0is designed to enable interoperability among its included services. This can make building complex applications that leverage different types of EO data easier.</p> </li> <li> <p>Open Source and Community Support:\u00a0As an open-source project,\u00a0<code>eoAPI</code>\u00a0allows developers to inspect its code, contribute to its development, and use it as a base for custom solutions. It also benefits from the support and innovation of a community of developers and EO data users.</p> </li> <li> <p>Scalability and Flexibility:\u00a0Each service in\u00a0<code>eoAPI</code>\u00a0can be used or deployed independently, which provides a lot of flexibility. If a developer's application only requires one or two of eoAPI's services, they don't need to deploy the entire suite.</p> </li> <li> <p>Facilitate Earth Observation Tasks: <code>eoAPI</code>\u00a0includes specialized tools for working with EO data, such as dynamic tiling, metadata searching, and features/vector tiles API. These can significantly facilitate EO data processing, analysis, and visualization.</p> </li> <li> <p>Ease of Deployment: <code>eoAPI</code>\u00a0supports containerized deployment using Docker, making it easier to set up, scale, and maintain applications built on it. Spin up the demo locally and start experimenting in minutes.</p> </li> </ul>"},{"location":"intro/#services-overview","title":"Services Overview","text":"<ul> <li> <p>STAC Metadata: Built with stac-fastapi.pgstac to enable data discovery. See the specifications core, search and features for API details.</p> </li> <li> <p>STAC browser : Built with the Radiant Earth STAC browser to provide a simple user-friendly interface for searching the STAC metadata.</p> </li> <li> <p>Raster Tiles: Built with titiler-pgstac and pgstac to enable large scale mosaic based on results of STAC searches queries. See docs for API details.</p> </li> <li> <p>OGC Features &amp; Vector Tiles: Built with tipg to create a lightweight OGC Features and Tiles API with a PostGIS database. See docs for API details.</p> </li> </ul> <p>See service details for more information.</p>"},{"location":"intro/#getting-started","title":"Getting started","text":"<p>The easiest way to start exploring the different eoAPI services is with Docker. Clone this repository and start the multi-container Docker applications using <code>Compose</code>:</p> <pre><code>git clone https://github.com/developmentseed/eoAPI.git\ncd eoAPI\ndocker compose up\n</code></pre> <p>Once the applications are up, you'll need to add STAC Collections and Items to the PgSTAC database. If you don't have, you can use the follow the MAXAR open data demo (or get inspired by the other demos).</p> <p>Then you can start exploring your dataset with:</p> <ul> <li>the STAC Metadata service http://localhost:8081</li> <li>the Raster service http://localhost:8082</li> </ul> <p>Info</p> <p>If you've added vector datasets to the <code>public</code> schema in the Postgres database, they will be available through the Vector service at http://localhost:8083.</p> <p>Alternatively, you may install and launch applications locally:</p> <pre><code>python -m pip install --upgrade virtualenv\nvirtualenv .venv\nsource .venv/bin/activate\n\nexport DATABASE_URL=postgresql://username:password@0.0.0.0:5439/postgis  # Connect to the database of your choice\n\npython -m pip install uvicorn\n\n###############################################################################\n# Install and launch the application\n# Select one of the following\n\n###############################################################################\n# STAC\npython -m pip install \"psycopg[binary,pool]\" stac-fastapi-pgstac\npython -m uvicorn stac_fastapi.pgstac.app:app --port 8081 --reload\n\n###############################################################################\n# RASTER\npython -m pip install \"psycopg[binary,pool]\" titiler-pgstac\npython -m uvicorn titiler.pgstac.main:app --port 8082 --reload\n\n###############################################################################\n# VECTOR\npython -m pip install tipg\npython -m uvicorn tipg.main:app --port 8083 --reload\n</code></pre> <p>Danger</p> <p>Python applications might have incompatible dependencies, which you can resolve by using a virtual environment per application</p>"},{"location":"services/","title":"Services","text":"<p>eoAPI combines several state-of-the-art projects to create an entire Earth Observation API. Each service can be used and deployed independently, but eoAPI creates the interconnections between each service:</p> <ul> <li>pgSTAC database stac-utils/pgstac</li> <li>STAC API built on top of stac-utils/stac-fastapi</li> <li>STAC Items And Mosaic Raster Tiles API built on top of stac-utils/titiler-pgstac</li> <li>OGC Features and Vector Tiles API built on top of developmentseed/tipg</li> </ul>"},{"location":"services/#database","title":"Database","text":"<p>The STAC database is at the heart of eoAPI and is the only mandatory service. We use <code>PgSTAC</code> Postgres schema and functions, which provides functionality for STAC Filters, CQL2 search, and utilities to help manage the indexing and partitioning of STAC Collections and Items.</p> <p>PgSTAC is used in production to scale to hundreds of millions of STAC items. PgSTAC implements core data models and functions to provide a STAC API from a PostgreSQL database. PgSTAC is entirely within the database and does not provide an HTTP-facing API. The Stac FastAPI PgSTAC backend and Franklin can be used to expose a PgSTAC catalog. Integrating PgSTAC with any other language with PostgreSQL drivers is also possible.</p> <p>PgSTAC Documentation: stac-utils.github.io/pgstac/pgstac</p> <p>pyPgSTAC Documentation: stac-utils.github.io/pgstac/pypgstac</p>"},{"location":"services/#metadata","title":"Metadata","text":"<p>The Metadata service deployed in eoAPI is built on stac-fastapi.pgstac application.</p> <p>By default, the STAC metadata service will have a set of endpoints to search and list STAC collections and items.</p> <p> </p> <p>Example</p> <ul> <li> <p>stac.eoapi.dev landing page</p> </li> <li> <p>stac.eoapi.dev/collections list available Collection</p> </li> <li> <p>stac.eoapi.dev/collections/MAXAR_southafrica_flooding22/items list available Items for the <code>MAXAR_southafrica_flooding22</code> collection</p> </li> <li> <p>stac.eoapi.dev/collections/MAXAR_southafrica_flooding22/items/36_213131033000_1040010076566100 get <code>36_213131033000_1040010076566100</code> Item in the <code>MAXAR_southafrica_flooding22</code> collection</p> </li> <li> <p>stac.eoapi.dev/search list of Items in the catalog</p> </li> <li> <p>stac.eoapi.dev/search?collections=MAXAR_Kahramanmaras_turkey_earthquake_23&amp;limit=5&amp;datetime=2023-02-06T00:00:00Z/2023-02-10T00:00:00Z list of Items in the catalog for the <code>MAXAR_Kahramanmaras_turkey_earthquake_23</code> collection between February 6<sup>th</sup> and 10<sup>th</sup></p> </li> </ul>"},{"location":"services/#raster","title":"Raster","text":"<p>The Raster service deployed in <code>eoAPI</code> is built on top of titiler-pgstac.</p> <p>It enables Raster visualization for a single STAC Item and large-scale (multi collections/items) mosaic based on STAC search queries.</p> <p> </p> <p>Example</p> <ul> <li>raster.eoapi.dev landing page</li> </ul> <p>Items endpoints</p> <ul> <li> <p>raster.eoapi.dev/collections/MAXAR_southafrica_flooding22/items/36_213131033000_1040010076566100/info get Raster metadata information about Assets found in <code>36_213131033000_1040010076566100</code> Item in the <code>MAXAR_southafrica_flooding22</code> collection</p> </li> <li> <p>raster.eoapi.dev/collections/MAXAR_southafrica_flooding22/items/36_213131033000_1040010076566100/info?assets=visual get Raster metadata information only for the <code>visual</code> Asset</p> </li> <li> <p>raster.eoapi.dev/collections/MAXAR_southafrica_flooding22/items/36_213131033000_1040010076566100/map?assets=visual&amp;minzoom=12&amp;maxzoom=19 show the <code>visual</code> Asset on a Map client</p> </li> <li> <p>raster.eoapi.dev/collections/MAXAR_southafrica_flooding22/items/36_213131033000_1040010076566100/tilejson.json?assets=ms_analytic&amp;minzoom=13&amp;maxzoom=17&amp;asset_bidx=ms_analytic|8,2,1&amp;rescale=0,4000 get a TileJSON document for the  <code>ms_analytic</code> Asset with band combination 8,2,1 with values rescaling from 0,4000 to 0,255</p> </li> </ul> <p>Mosaic endpoints</p> <ul> <li> <p>raster.eoapi.dev/searches/list list pre-registered Virtual Mosaics</p> </li> <li> <p>raster.eoapi.dev/searches/2f3073257a5b6530aedbb0e4b4f726fa/info get information about the <code>2f3073257a5b6530aedbb0e4b4f726fa</code> mosaic</p> </li> <li> <p>raster.eoapi.dev/searches/2f3073257a5b6530aedbb0e4b4f726fa/map?assets=visual&amp;minzoom=12&amp;maxzoom=19 show the <code>2f3073257a5b6530aedbb0e4b4f726fa</code> mosaic and using the <code>visual</code> Asset on a Map client</p> </li> <li> <p>raster.eoapi.dev/searches/2f3073257a5b6530aedbb0e4b4f726fa/tilejson.json?assets=visual&amp;minzoom=12&amp;maxzoom=19 get a TileJSON document for the <code>2f3073257a5b6530aedbb0e4b4f726fa</code> mosaic and using the <code>visual</code> Asset</p> </li> </ul>"},{"location":"services/#vector","title":"Vector","text":"<p>The OGC Features and (Mapbox Vector) Tiles API service deployed in <code>eoAPI</code> is built on top of tipg).</p> <p>It enables vector Features/Features Collection exploration and visualization for Tables stored in the Postgres database (in the <code>public</code> schema).</p> <p> </p> <p>Example</p> <ul> <li>vector.eoapi.dev landing page</li> </ul> <p>OGC Features</p> <ul> <li> <p>vector.eoapi.dev/collections list available Tables or Function Layers</p> </li> <li> <p>vector.eoapi.dev/collections/public.countries get information about the <code>countries</code> Table</p> </li> <li> <p>vector.eoapi.dev/collections/public.countries/items list items for the <code>countries</code> Table</p> </li> </ul> <p>OGC Tiles</p> <ul> <li> <p>vector.eoapi.dev/collections/public.countries/tiles list all TileSet available for the <code>countries</code> Table</p> </li> <li> <p>vector.eoapi.dev/collections/public.countries/tiles/WebMercatorQuad get <code>WebMercatorQuad</code> TileSet information for the <code>countries</code> Table</p> </li> <li> <p>vector.eoapi.dev/collections/public.countries/viewer shows the <code>countries</code> Table on a Map client using vector tiles</p> </li> <li> <p>vector.eoapi.dev/tileMatrixSets/WebMercatorQuad <code>WebMercatorQuad</code> TileMatrixSet information</p> </li> </ul>"},{"location":"services/#browsing-ui","title":"Browsing UI","text":"<p>The browsing UI deployed in eoAPI is built on the radiant earth STAC browser, and provides a configurable, user-friendly interface to search across and within collections and quickly visualize single items assets.</p> <p> </p> <p>Example</p> <ul> <li>eoapi-dev-stac-browser.s3-website-us-east-1.amazonaws.com landing page</li> </ul>"}]}